import Head from "next/head";
import Header from "@/components/Header.js";
import SearchForm from "@/components/SearchForm.js";
import styles from "@/styles/Index.module.scss";
import Link from "next/link";
import CategoryBar from "@/components/CategoryBar";
import HomeProperty from "@/components/HomeProperty/HomeProperty.js";
import RadioButton from "@/components/RadioButton.js";
import FilterContainer from "@/components/FilterContainer.js";
import React from "react";
import Checkbox from "@/components/Checkbox.js";
import PropertyTypeB from "@/components/PropertyTypeB.js";
import { motion } from "framer-motion";
import OuterFilterContainer from "@/components/OuterFilterContainer.js";
import Json from "@/components/jsondata.js";

let categories = [
  "All homes",
  "National parks",
  "Mansions",
  "Castles",
  "Golfing",
  "Amazing pools",
  "Amazing views",
  "Golfing",
  "Off-the-grid",
  "Lakefront",
  "Design",
  "Play",
  "Adapted",
  "Treehouses",
  "Historical homes",
];

let imgArray;

export const SearchFilterContext = React.createContext();

export default function Home() {
  const [visibility, setVisibility] = React.useState(false);
  const [selectedCategory, setSelectedCategory] = React.useState("All homes");
  function updateVisibility() {
    setVisibility((prev) => !prev);
  }

  const [searchState, setSearchState] = React.useState({
    region: "I'm flexible",
    guests: 0,
  });

  const [searchIncrement, setSearchIncrement] = React.useState(0);
  const [filtered2, setFiltered2] = React.useState(false);

  let value = {
    searchState,
    setSearchState,
    searchIncrement,
    setSearchIncrement,
  };

  let preFiltered = Json;
  let filtered1;

  React.useEffect(() => {
    let nextFilter;
    if (selectedCategory == "All homes") {
      filtered1 = preFiltered;
    } else {
      filtered1 = preFiltered.filter(
        (property) => property.category == selectedCategory
      );
    }
    if (searchState.region == "I'm flexible" && searchState.guests == 0) {
      setFiltered2(filtered1);
      nextFilter = filtered1;
    } else if (searchState.region == "I'm flexible") {
      if (parseInt(searchState.guests) >= 8) {
        setFiltered2(() => {
          return filtered1.filter(
            (property) => parseInt(property.number_beds) >= 8
          );
        });
        nextFilter = filtered1.filter(
          (property) => parseInt(property.number_beds) >= 8
        );
      } else {
        setFiltered2(() => {
          return filtered1.filter(
            (property) =>
              parseInt(property.number_beds) >= parseInt(searchState.guests)
          );
        });
        nextFilter = filtered1.filter(
          (property) =>
            parseInt(property.number_beds) >= parseInt(searchState.guests)
        );
      }
    }
    //if there are 8 guests or more, allow only houses with 8+ beds
    else {
      if (parseInt(searchState.guests) >= 8) {
        setFiltered2(() => {
          return filtered1.filter(
            (property) =>
              parseInt(property.number_beds) >= 8 &&
              (property.Region1 == searchState.region ||
                property.Region2 == searchState.region)
          );
        });
        nextFilter = filtered1.filter(
          (property) =>
            parseInt(property.number_beds) >= 8 &&
            (property.Region1 == searchState.region ||
              property.Region2 == searchState.region)
        );
      } else {
        // if there are less than 8 guests, check that guests are below beds and check regions
        setFiltered2(() => {
          return filtered1.filter(
            (property) =>
              parseInt(property.number_beds) >= parseInt(searchState.guests) &&
              (searchState.region == property.Region1 ||
                searchState.region == property.Region2)
          );
        });
        nextFilter = filtered1.filter(
          (property) =>
            parseInt(property.number_beds) >= parseInt(searchState.guests) &&
            (searchState.region == property.Region1 ||
              searchState.region == property.Region2)
        );
      }
    }
    imgArray = [];
    for (let i = 1; i < nextFilter.length + 1; i++) {
      imgArray[i - 1] = [];
      for (let j = 1; j < 6; j++) {
        let link = `/images/property_images/${nextFilter[i - 1].id}/${
          nextFilter[i - 1].id
        }${j}.webp`;
        imgArray[i - 1].push(link);
      }
    }
  }, [selectedCategory, searchIncrement]);

  let gridRowsVariable = "";
  if (filtered2 != false) {
    let gridRows = parseInt(filtered2.length / 4) + 1;
    for (let i = 0; i < gridRows; i++) {
      gridRowsVariable += "20vw ";
    }
  }

  console.log(imgArray);

  return (
    <>
      <Head>
        <title>Airbnb</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <SearchFilterContext.Provider value={value}>
        <Header />
      </SearchFilterContext.Provider>
      <CategoryBar
        categories={categories}
        updateVisibility={updateVisibility}
        selectedCategory={selectedCategory}
        setSelectedCategory={setSelectedCategory}
      />
      <main>
        {imgArray && (
          <div
            className={styles.carouselwrapper}
            style={{ gridTemplateRows: gridRowsVariable }}
          >
            {filtered2.map((property, index) => {
              return (
                <HomeProperty
                  carouselImages={imgArray[index]}
                  price={property.price}
                  stars="5.0"
                  location={`${property.city_id}, ${property.country}`}
                  key={index}
                  index={index}
                />
              );
            })}
          </div>
        )}
        <OuterFilterContainer
          visibility={visibility}
          updateVisibility={updateVisibility}
        />
        <div
          className={visibility ? styles.grey : styles.hidden}
          onClick={updateVisibility}
        ></div>
      </main>
    </>
  );
}

//can also do router.push
